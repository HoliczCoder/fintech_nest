generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Customer {
  customer_id      Int              @id @default(autoincrement())
  uuid             String           @unique @default(dbgenerated("(replace(uuid(),_utf8mb4\\'-\\',_utf8mb4\\'\\'))"))
  status           Int              @default(1)
  group_id         Int?
  email            String           @unique
  password         String
  full_name        String?
  created_at       DateTime         @default(now())
  updated_at       DateTime         @default(now()) @updatedAt
  customer_group   CustomerGroup?   @relation(fields: [group_id], references: [customer_group_id])
  customer_address CustomerAddress?
  Order            Order[]

  @@index([group_id], map: "customer_group_id_fkey")
  @@map("customer")
}

model User {
  user_id    Int      @id @default(autoincrement())
  uuid       String   @unique @default(dbgenerated("(replace(uuid(),'-',''))"))
  email      String   @unique
  password   String
  full_name  String?
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
  role       String

  @@map("user")
}

model AdminUser {
  admin_user_id Int      @id @default(autoincrement())
  uuid          String   @unique @default(dbgenerated("(replace(uuid(),_utf8mb4\\'-\\',_utf8mb4\\'\\'))"))
  status        Int
  email         String
  password      String
  full_name     String?
  created_at    DateTime @default(now())
  updated_at    DateTime @default(now()) @updatedAt

  @@map("admin_user")
}

model CustomerAddress {
  customer_address_id Int      @id @default(autoincrement())
  uuid                String   @unique @default(dbgenerated("(replace(uuid(),_utf8mb4\\'-\\',_utf8mb4\\'\\'))"))
  customer_id         Int      @unique
  full_name           String?
  telephone           String?
  address_1           String?
  address_2           String?
  postcode            String?
  city                String?
  province            String?
  country             String
  created_at          DateTime @default(now())
  updated_at          DateTime @default(now()) @updatedAt
  is_default          Int?
  customer            Customer @relation(fields: [customer_id], references: [customer_id])

  @@index([customer_id], map: "FK_CUSTOMER_ADDRESS_LINK")
  @@map("customer_address")
}

model CustomerGroup {
  customer_group_id Int        @id @unique
  uuid              String     @unique @default(dbgenerated("(replace(uuid(),_utf8mb4\\'-\\',_utf8mb4\\'\\'))"))
  group_name        String
  created_at        DateTime   @default(now())
  updated_at        DateTime   @default(now()) @updatedAt
  row_id            Int        @unique @default(autoincrement())
  customer          Customer[]

  @@index([row_id])
  @@map("customer_group")
}

model UserTokenSecret {
  user_token_secret_id Int      @id @default(autoincrement())
  user_id              String   @unique
  sid                  String
  secret               String
  created_at           DateTime @default(now())
  updated_at           DateTime @default(now()) @updatedAt

  @@map("user_token_secret")
}

model Product {
  product_id                 Int                          @id @default(autoincrement())
  uuid                       String                       @unique @default(dbgenerated("(replace(uuid(),_utf8mb4\\'-\\',_utf8mb4\\'\\'))"))
  variant_group_id           Int?
  visibility                 Int                          @default(1)
  group_id                   Int?
  image                      String?
  sku                        String                       @unique
  price                      Float
  qty                        Int
  weight                     Float?
  manage_stock               Int
  stock_availability         Int
  tax_class                  Int?
  status                     Int
  created_at                 DateTime                     @default(now())
  updated_at                 DateTime                     @default(now()) @updatedAt
  CartItem                   CartItem[]
  OrderItem                  OrderItem[]
  attribute_group            AtrributeGroup?              @relation(fields: [group_id], references: [attribute_group_id])
  variant_group              VariantGroup?                @relation(fields: [variant_group_id], references: [variant_group_id])
  ProductAttributeValueIndex ProductAttributeValueIndex[]
  ProductCateogory           ProductCateogory[]
  ProductDescription         ProductDescription?

  @@index([group_id], map: "product_group_id_fkey")
  @@index([variant_group_id], map: "product_variant_group_id_fkey")
  @@map("product")
}

model ProductDescription {
  product_description_id         Int     @id @default(autoincrement())
  product_description_product_id Int     @unique
  name                           String
  description                    String?
  short_description              String?
  url_key                        String
  meta_title                     String?
  meta_description               String?
  meta_keywords                  String?
  product                        Product @relation(fields: [product_description_product_id], references: [product_id])

  @@map("product_description")
}

model VariantGroup {
  variant_group_id   Int            @id @default(autoincrement())
  uuid               String         @unique @default(dbgenerated("(replace(uuid(),_utf8mb4\\'-\\',_utf8mb4\\'\\'))"))
  attribute_group_id Int
  attribute_one      Int?
  attribute_two      Int?
  attribute_three    Int?
  attribute_four     Int?
  attribute_five     Int?
  visibility         Int            @default(0)
  Product            Product[]
  attribute_group    AtrributeGroup @relation(fields: [attribute_group_id], references: [attribute_group_id])
  attribute          Atrribute?     @relation(fields: [attribute_one], references: [attribute_id])

  @@index([attribute_group_id], map: "variant_group_attribute_group_id_fkey")
  @@index([attribute_one], map: "variant_group_attribute_one_fkey")
  @@map("variant_group")
}

model AtrributeGroup {
  attribute_group_id Int                  @id @default(autoincrement())
  uuid               String               @unique @default(dbgenerated("(replace(uuid(),_utf8mb4\\'-\\',_utf8mb4\\'\\'))"))
  group_name         String
  created_at         DateTime             @default(now())
  updated_at         DateTime             @default(now()) @updatedAt
  AttributeGroupLink AttributeGroupLink[]
  Product            Product[]
  VariantGroup       VariantGroup[]

  @@map("attribute_group")
}

model Atrribute {
  attribute_id               Int                          @id @default(autoincrement())
  uuid                       String                       @unique @default(dbgenerated("(replace(uuid(),_utf8mb4\\'-\\',_utf8mb4\\'\\'))"))
  attribute_code             String                       @unique
  attribute_name             String
  type                       String
  is_required                Int                          @default(0)
  display_on_frontend        Int                          @default(0)
  sort_order                 Int                          @default(0)
  is_filterable              Int                          @default(0)
  AttributeGroupLink         AttributeGroupLink[]
  AttributeOption            AttributeOption[]
  ProductAttributeValueIndex ProductAttributeValueIndex[]
  VariantGroup               VariantGroup[]

  @@map("attribute")
}

model AttributeGroupLink {
  attribute_group_link_id Int            @id @default(autoincrement())
  attribute_id            Int
  group_id                Int
  attribute               Atrribute      @relation(fields: [attribute_id], references: [attribute_id], onDelete: Cascade)
  attribute_group         AtrributeGroup @relation(fields: [group_id], references: [attribute_group_id], onDelete: Cascade)

  @@index([attribute_id], map: "attribute_group_link_attribute_id_fkey")
  @@index([group_id], map: "attribute_group_link_group_id_fkey")
  @@map("attribute_group_link")
}

model AttributeOption {
  attribute_option_id        Int                          @id @default(autoincrement())
  uuid                       String                       @unique @default(dbgenerated("(replace(uuid(),_utf8mb4\\'-\\',_utf8mb4\\'\\'))"))
  attribute_id               Int
  attribute_code             String
  option_text                String
  attribute                  Atrribute                    @relation(fields: [attribute_id], references: [attribute_id], onDelete: Cascade)
  ProductAttributeValueIndex ProductAttributeValueIndex[]

  @@index([attribute_id])
  @@map("attribute_option")
}

model ProductAttributeValueIndex {
  product_attribute_value_index_id Int              @id @default(autoincrement())
  uuid                             String           @unique @default(dbgenerated("(replace(uuid(),_utf8mb4\\'-\\',_utf8mb4\\'\\'))"))
  product_id                       Int
  attribute_id                     Int
  option_id                        Int?
  option_text                      String?
  attribute                        Atrribute        @relation(fields: [attribute_id], references: [attribute_id], onDelete: Cascade)
  attribute_option                 AttributeOption? @relation(fields: [option_id], references: [attribute_option_id])
  product                          Product          @relation(fields: [product_id], references: [product_id], onDelete: Cascade)

  @@unique([product_id, attribute_id, option_id])
  @@unique([product_id, attribute_id])
  @@index([attribute_id], map: "product_attribute_value_index_attribute_id_fkey")
  @@index([option_id], map: "product_attribute_value_index_option_id_fkey")
  @@map("product_attribute_value_index")
}

model Category {
  category_id         Int                  @id @default(autoincrement())
  uuid                String               @unique @default(dbgenerated("(replace(uuid(),_utf8mb4\\'-\\',_utf8mb4\\'\\'))"))
  status              Int
  parent_id           Int?
  include_in_nav      Int
  position            Int?
  created_at          DateTime             @default(now())
  updated_at          DateTime             @default(now()) @updatedAt
  CategoryDescription CategoryDescription?
  ProductCateogory    ProductCateogory[]

  @@map("category")
}

model ProductCateogory {
  product_category_id Int      @id @default(autoincrement())
  category_id         Int
  product_id          Int
  Category            Category @relation(fields: [category_id], references: [category_id], onDelete: Cascade)
  Product             Product  @relation(fields: [product_id], references: [product_id], onDelete: Cascade)

  @@unique([category_id, product_id])
  @@index([product_id], map: "product_cateogory_product_id_fkey")
  @@map("product_cateogory")
}

model CategoryDescription {
  category_description_id          Int      @id @default(autoincrement())
  category_description_category_id Int      @unique
  name                             String
  short_description                String?
  description                      String?
  image                            String?
  meta_title                       String?
  meta_keywords                    String?
  meta_description                 String?
  url_key                          String
  Category                         Category @relation(fields: [category_description_category_id], references: [category_id], onDelete: Cascade)

  @@map("category_description")
}

model Cart {
  cart_id               Int        @id @default(autoincrement())
  uuid                  String     @unique @default(dbgenerated("(replace(uuid(),_utf8mb3\\'-\\',_utf8mb4\\'\\'))"))
  sid                   String?    @unique
  currency              String     @default("USD")
  customer_id           Int?       @unique
  customer_group_id     Int?
  customer_email        String?
  customer_full_name    String?
  user_ip               String?
  status                Int        @default(0)
  coupon                Int?
  shipping_fee_excl_tax Float?     @default(0)
  shipping_fee_incl_tax Float?     @default(0)
  discount_amount       Float?     @default(0)
  sub_total             Float      @default(0)
  total_qty             Int        @default(0)
  total_weight          Float?
  tax_amount            Float      @default(0)
  grand_total           Float?
  shipping_method       String?
  shipping_method_name  String?
  shipping_address_id   Int?
  billing_address_id    Int?
  shipping_note         String?
  created_at            DateTime   @default(now())
  updated_at            DateTime   @default(now()) @updatedAt
  CartItem              CartItem[]
  Order                 Order?

  @@map("cart")
}

model CartAddress {
  cart_address_id Int     @id @default(autoincrement())
  uuid            String  @unique @default(dbgenerated("(replace(uuid(),_utf8mb4\\'-\\',_utf8mb4\\'\\'))"))
  full_name       String?
  postcode        String?
  telephone       String?
  country         String?
  province        String?
  city            String?
  address_1       String?
  address_2       String?

  @@map("cart_address")
}

model CartItem {
  cart_item_id           Int      @id @default(autoincrement())
  uuid                   String   @unique @default(dbgenerated("(replace(uuid(),_utf8mb4\\'-\\',_utf8mb4\\'\\'))"))
  cart_id                Int
  product_id             Int
  product_sku            String
  product_name           String
  thumbnail              String?
  product_weigth         Float?
  product_price          Float
  product_price_incl_tax Float
  qty                    Int
  final_price            Float
  final_price_incl_tax   Float
  tax_percent            Float    @default(0)
  tax_amount             Float    @default(0)
  discount_amount        Float    @default(0)
  total                  Float
  variant_group_id       Int?
  variant_options        String?
  product_custom_options String?
  created_at             DateTime @default(now())
  updated_at             DateTime @default(now()) @updatedAt
  Cart                   Cart     @relation(fields: [cart_id], references: [cart_id], onDelete: Cascade)
  Product                Product  @relation(fields: [product_id], references: [product_id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([cart_id, product_id])
  @@index([product_id], map: "cart_item_product_id_fkey")
  @@map("cart_item")
}

model Order {
  order_id              Int                 @id @default(autoincrement())
  uuid                  String              @unique @default(dbgenerated("(replace(uuid(),_utf8mb4\\'-\\',_utf8mb4\\'\\'))"))
  sid                   String?
  order_number          String              @unique
  cart_id               Int                 @unique
  currency              String
  customer_id           Int
  customer_email        String?
  customer_full_name    String?
  user_ip               String?
  user_agent            String?
  coupon                String?
  shipping_fee_excl_tax Float?
  shipping_fee_incl_tax Float?
  discount_amount       Float?
  sub_total             Float
  total_qty             Int
  total_weight          Float?
  tax_amount            Float
  shipping_note         String?
  grand_total           Float
  shipping_method       String?
  shipping_method_name  String?
  shipping_address_id   Int?
  payment_method        String?
  payment_method_name   String?
  billing_address_id    Int?
  shipment_status       Int                 @default(0)
  payment_status        Int                 @default(0)
  created_at            DateTime            @default(now())
  updated_at            DateTime            @default(now()) @updatedAt
  Cart                  Cart                @relation(fields: [cart_id], references: [cart_id])
  Customer              Customer            @relation(fields: [customer_id], references: [customer_id])
  OrderActivity         OrderActivity?
  OrderItem             OrderItem[]
  PaymentTransaction    PaymentTransaction?
  Shipment              Shipment?

  @@index([customer_id], map: "order_customer_id_fkey")
  @@map("order")
}

model OrderActivity {
  order_activity_id       Int      @id @default(autoincrement())
  order_activity_order_id Int      @unique
  comment                 String
  customer_notified       Int
  created_at              DateTime @default(now())
  updated_at              DateTime @default(now()) @updatedAt
  Order                   Order    @relation(fields: [order_activity_id], references: [order_id], onDelete: Cascade)

  @@map("order_activity")
}

model OrderAddress {
  order_address_id Int     @id @default(autoincrement())
  uuid             String  @unique @default(dbgenerated("(replace(uuid(),_utf8mb4\\'-\\',_utf8mb4\\'\\'))"))
  full_name        String?
  postcode         String?
  telephone        String?
  country          String?
  province         String?
  city             String?
  address_1        String?
  address_2        String?

  @@map("order_address")
}

model OrderItem {
  order_item_id          Int     @id @default(autoincrement())
  uuid                   String  @unique @default(dbgenerated("(replace(uuid(),_utf8mb4\\'-\\',_utf8mb4\\'\\'))"))
  order_item_order_id    Int
  product_id             Int
  referer                Int?
  product_sku            String
  product_name           String
  thumbnail              String?
  product_weight         Float?
  product_price          Float
  product_price_incl_tax Float
  qty                    Int
  final_price            Float
  final_price_incl_tax   Float
  tax_percent            Float
  tax_amount             Float
  discount_amount        Float
  total                  Float
  variant_group_id       Int?
  variant_options        String?
  product_custom_options String?
  requested_data         String?
  Order                  Order   @relation(fields: [order_item_order_id], references: [order_id])
  Product                Product @relation(fields: [product_id], references: [product_id], onDelete: NoAction, onUpdate: NoAction)

  @@index([order_item_order_id], map: "order_item_order_item_order_id_fkey")
  @@index([product_id], map: "order_item_product_id_fkey")
  @@map("order_item")
}

model Shipment {
  shipment_id       Int      @id @default(autoincrement())
  uuid              String   @unique @default(dbgenerated("(replace(uuid(),_utf8mb4\\'-\\',_utf8mb4\\'\\'))"))
  shipment_order_id Int      @unique
  carrier_name      String?
  tracking_number   String?
  created_at        DateTime @default(now())
  updated_at        DateTime @default(now()) @updatedAt
  Order             Order    @relation(fields: [shipment_order_id], references: [order_id], onDelete: Cascade)

  @@map("shipment")
}

model PaymentTransaction {
  payment_transaction_id       Int      @id @default(autoincrement())
  uuid                         String   @unique @default(dbgenerated("(replace(uuid(),_utf8mb4\\'-\\',_utf8mb4\\'\\'))"))
  payment_transaction_order_id Int      @unique
  transaction_id               String?  @unique
  transaction_type             String
  amount                       Float
  parent_transaction_id        String?
  payment_action               String?
  additional_information       String?
  created_at                   DateTime @default(now())
  updated_at                   DateTime @default(now()) @updatedAt
  Order                        Order    @relation(fields: [payment_transaction_order_id], references: [order_id], onDelete: Cascade)

  @@map("payment_transaction")
}
